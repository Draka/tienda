.navbar {
  display: flex;
  align-items: center;
  color: $color-default;
  background-color: $color-default-inv;

  &.fixed {
    width: 100%;
    z-index: 500;
  }

  .container,
  .container-fluid {
    display: flex;
    align-items: center;
    position: relative;
  }

  .expand {
    flex: 0 1 100%;
  }
  a:not(button):not(.btn):not(.item) {
    padding: 0 1em;
    display: flex;
    align-items: center;
    color: $color-default;
    white-space: nowrap;

    &:hover,
    &:focus {
      background-color: set-change-color($color-default-inv, 8);
      color: $color-default;
      text-decoration: none;
    }
  }
  @each $key, $val in $colors-sections {
    &.#{$key} {
      color: set-text-color(map-get($colors-sections, $key));
      background-color: map-get($colors-sections, $key);
      *:not(.dropdown-list) a:not(button):not(.btn):not(.item) {
        color: set-text-color(map-get($colors-sections, $key));

        &:hover,
        &:focus {
          background-color: set-change-color(map-get($colors-sections, $key), 8);
          color: set-text-color(map-get($colors-sections, $key));
        }
      }
    }

    //variantes
    @each $ckey, $cval in $colors-variants {
      &.#{$key}-#{$ckey} {
        $background-color: darken(
          $color: $val,
          $amount: 0,
        );
        @if ($cval < 0) {
          $background-color: lighten(
            $color: $val,
            $amount: $cval * -1,
          );
        } @else {
          $background-color: darken(
            $color: $val,
            $amount: $cval,
          );
        }
        color: set-text-color(map-get($colors-sections, $key));
        background-color: $background-color;
        *:not(.dropdown-list) a:not(button):not(.btn):not(.item) {
          color: set-text-color(map-get($colors-sections, $key));

          &:hover,
          &:focus {
            background-color: set-change-color($background-color, 8);
            color: set-text-color(map-get($colors-sections, $key));
          }
        }
      }
    }
  }
  .logo {
    img {
      height: 2.5em;
    }
  }
}
$ant: null;
$sant: null;
@each $key, $size in $navar {
  @if map-has-key($breakpoints, $key) {
    @include media-breakpoint-up(map-get($breakpoints, $key)) {
      .navbar {
        height: $size;
        a:not(button):not(.btn):not(.item) {
          height: $size;
        }
      }
      .navbar-fixed-t {
        margin-top: $size;
      }
      .navbar-fixed-b {
        margin-bottom: $size;
      }
    }
    $var: index(($breakpoints), ($key map-get($breakpoints, $key)));

    @if $var !=1 {
      @include media-breakpoint(map-get($breakpoints, $ant), map-get($breakpoints, $key) - 0.1) {
        .navbar-fixed-t-#{$ant} {
          margin-top: $sant;
        }
        .navbar-fixed-b-#{$ant} {
          margin-bottom: $sant;
        }
      }
    }
    $ant: $key;
    $sant: $size;
  }
}
@include media-breakpoint(map-get($breakpoints, $ant)) {
  .navbar-fixed-t-#{$ant} {
    margin-top: $sant;
  }
  .navbar-fixed-b-#{$ant} {
    margin-bottom: $sant;
  }
}

// $ant: null;
// $vant: null;
// @each $ckey, $cval in $breakpoints {
//   $var: index(($breakpoints), ($ckey $cval));

//   @if $var !=1 {
//     @include media-breakpoint(map-get($breakpoints, $ant), map-get($breakpoints, $ckey) - 0.1) {
//       .navbar-fixed-t-#{$ant} {
//         margin-top: $vant;
//       }
//       .navbar-fixed-b-#{$ant} {
//         margin-bottom: $vant;
//       }
//     }
//   }
// }

// $ant: $ckey;
// $vant: $cval;
// @include media-breakpoint(map-get($breakpoints, $ant)) {
//   .navbar-fixed-t-#{$ant} {
//     margin-top: $vant;
//   }
//   .navbar-fixed-b-#{$ant} {
//     margin-bottom: $vant;
//   }
// }
