.navbar {
  display: flex;
  align-items: center;
  color: $color-default;
  background-color: $color-default-inv;

  &.fixed {
    width: 100%;
    z-index: 500;
  }

  .container,
  .container-fluid {
    display: flex;
    align-items: center;
    position: relative;
  }

  .expand {
    flex: 0 1 100%;
  }
  a:not(button):not(.btn):not(.item):not(.nh) {
    display: flex;
    align-items: center;
    color: $color-default;
    white-space: nowrap;

    &:hover,
    &:focus {
      background-color: set-change-color($color-default-inv, 8);
      color: $color-default;
      text-decoration: none;
    }
  }
  @each $key, $val in $colors-sections {
    &.#{$key} {
      color: set-text-color($val);
      background-color: $val;
      *:not(.dropdown-list) a:not(button):not(.btn):not(.item) {
        color: set-text-color($val);

        &:hover,
        &:focus {
          background-color: set-change-color($val, 8);
          color: set-text-color($val);
        }
      }
    }

    //variantes
    @each $ckey, $cval in $colors-variants {
      &.#{$key}-#{$ckey} {
        $background-color: darken(
          $color: $val,
          $amount: 0,
        );
        @if ($cval < 0) {
          $background-color: lighten(
            $color: $val,
            $amount: $cval * -1,
          );
        } @else {
          $background-color: darken(
            $color: $val,
            $amount: $cval,
          );
        }
        color: set-text-color($background-color);
        background-color: $background-color;
        *:not(.dropdown-list) a:not(button):not(.btn):not(.item) {
          color: set-text-color($background-color);

          &:hover,
          &:focus {
            background-color: set-change-color($background-color, 8);
            color: set-text-color($background-color);
          }
        }
      }
    }
  }
  .logo {
    img {
      height: 2.5em;
    }
  }
}
@each $key, $val in $sizes-objects {
  .navbar-#{$key} {
    height: $val;
    a:not(button):not(.btn):not(.item):not(.nh) {
      height: $val;
    }
  }
  .navbar-fixed-t-#{$key} {
    margin-top: $val;
  }
  .navbar-fixed-b-#{$key} {
    padding-bottom: $val;
  }
}

$ant: null;
$var: null;

@each $key, $val in $breakpoints {

  $var: index(($breakpoints), ($key $val));

  @if $var !=1 {
    @include media-breakpoint(map-get($breakpoints, $ant), map-get($breakpoints, $key) - 0.1) {

      @each $key, $val in $sizes-objects {
        .navbar-fixed-t-#{$key}-#{$ant} {
          margin-top: $val;
        }
        .navbar-fixed-b-#{$key}-#{$ant} {
          padding-bottom: $val;
        }
      }
    }

  }

  $ant: $key;

  @include media-breakpoint(map-get($breakpoints, $ant)) {
    .navbar-fixed-t-#{$key}-#{$ant} {
      margin-top: $val;
    }
    .navbar-fixed-b-#{$key}-#{$ant} {
      padding-bottom: $val;
    }
  }
}

